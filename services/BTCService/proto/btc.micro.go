// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/btc.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/btc.proto

It has these top-level messages:
	GetRatioReq
	GetRatioResp
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BtcSupport service

type BtcSupportService interface {
	GetRatio(ctx context.Context, in *GetRatioReq, opts ...client.CallOption) (*GetRatioResp, error)
}

type btcSupportService struct {
	c    client.Client
	name string
}

func NewBtcSupportService(name string, c client.Client) BtcSupportService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &btcSupportService{
		c:    c,
		name: name,
	}
}

func (c *btcSupportService) GetRatio(ctx context.Context, in *GetRatioReq, opts ...client.CallOption) (*GetRatioResp, error) {
	req := c.c.NewRequest(c.name, "BtcSupport.GetRatio", in)
	out := new(GetRatioResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BtcSupport service

type BtcSupportHandler interface {
	GetRatio(context.Context, *GetRatioReq, *GetRatioResp) error
}

func RegisterBtcSupportHandler(s server.Server, hdlr BtcSupportHandler, opts ...server.HandlerOption) {
	type btcSupport interface {
		GetRatio(ctx context.Context, in *GetRatioReq, out *GetRatioResp) error
	}
	type BtcSupport struct {
		btcSupport
	}
	h := &btcSupportHandler{hdlr}
	s.Handle(s.NewHandler(&BtcSupport{h}, opts...))
}

type btcSupportHandler struct {
	BtcSupportHandler
}

func (h *btcSupportHandler) GetRatio(ctx context.Context, in *GetRatioReq, out *GetRatioResp) error {
	return h.BtcSupportHandler.GetRatio(ctx, in, out)
}
